---
---

<canvas id="flowRainCanvas"></canvas>

<style>
  #flowRainCanvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1; /* 背景在内容下方 */
    display: block;
    background: #0a0a12; /* 深色背景 */
    /* 使用 radial-gradient 样式作为初始背景 */
    --color-bg: #1f174e;
    --color-bg-2: #151436;
    --color-bg-3: #000;
    --color-link: #8596df;
    --color-link-hover: #723bb7;
    background: radial-gradient(
      ellipse at 30% 48%,
      var(--color-bg) 0,
      var(--color-bg-2) 45%,
      var(--color-bg-3) 150%
    );
  }
</style>

<script is:inline>
(() => {
  const canvas = document.getElementById("flowRainCanvas");
  if (!canvas) return;
  const ctx = canvas.getContext("2d");
  if (!ctx) return;

  let width = window.innerWidth;
  let height = window.innerHeight;
  canvas.width = width;
  canvas.height = height;

  const letters = "Loading...";
  const fontSize = 120;
  const particleCount = 800;

  ctx.font = `${fontSize}px Arial`;
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";

  // --- 创建文字 mask ---
  const maskCanvas = document.createElement("canvas");
  const maskCtx = maskCanvas.getContext("2d");
  maskCanvas.width = width;
  maskCanvas.height = height;

  function createMask() {
    maskCtx.clearRect(0, 0, width, height);
    maskCtx.font = `${fontSize}px Arial`;
    maskCtx.textAlign = "center";
    maskCtx.textBaseline = "middle";
    maskCtx.fillStyle = "#fff";
    maskCtx.fillText(letters, width / 2, height / 2);
    return maskCtx.getImageData(0, 0, width, height).data;
  }

  let maskData = createMask();
  const accum = new Uint8Array(width * height);

  // --- 彩色粒子类 ---
  class Particle {
    constructor() { this.reset(); }
    reset() {
      this.x = Math.random() * width;
      this.y = Math.random() * -height;
      this.vy = 1 + Math.random() * 3;
      this.vx = (Math.random() - 0.5) * 0.5;
      this.size = 1 + Math.random() * 2;
      // 随机颜色 HSL
      this.hue = Math.floor(Math.random() * 360);
      this.saturation = 70 + Math.random()*30; // 70~100%
      this.lightness = 50 + Math.random()*20;  // 50~70%
      this.alpha = 0.7 + Math.random()*0.3;
    }
    update() {
      this.x += this.vx;
      this.y += this.vy;
      const px = Math.floor(this.x);
      const py = Math.floor(this.y);
      if (px<0 || px>=width || py<0 || py>=height) { this.reset(); return; }

      const alpha = maskData[(py*width + px)*4 + 3];
      if (alpha > 128) {
        accum[py*width + px] = 1;
        this.vy *= 0.5;
        this.vx = (Math.random()-0.5)*0.3;
        if (Math.random() < 0.02) this.reset();
      }
      if (this.y > height) this.reset();
    }
    draw() {
      ctx.fillStyle = `hsla(${this.hue},${this.saturation}%,${this.lightness}%,${this.alpha})`;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI*2);
      ctx.fill();
    }
  }

  const particles = [];
  for (let i = 0; i < particleCount; i++) particles.push(new Particle());

  function draw() {
    ctx.clearRect(0,0,width,height);

    // --- 绘制累积雨水 ---
    const imageData = ctx.getImageData(0,0,width,height);
    for (let y=0; y<height; y++) {
      for (let x=0; x<width; x++) {
        const idx = y*width + x;
        if (accum[idx]) {
          const i = idx*4;
          // 渐变累积色彩
          const hue = (x + y + performance.now()/10) % 360;
          const rgb = hslToRgb(hue/360, 0.8, 0.5);
          imageData.data[i] = rgb[0];
          imageData.data[i+1] = rgb[1];
          imageData.data[i+2] = rgb[2];
          imageData.data[i+3] = 255;
        }
      }
    }
    ctx.putImageData(imageData,0,0);

    // 绘制粒子
    particles.forEach(p => { p.draw(); p.update(); });

    // 绘制文字轮廓（低透明度）
    ctx.fillStyle = "rgba(255,255,255,0.05)";
    ctx.fillText(letters, width/2, height/2);

    requestAnimationFrame(draw);
  }

  draw();

  // HSL 转 RGB
  function hslToRgb(h, s, l){
    let r, g, b;
    if(s===0){ r=g=b=l; }
    else {
      const hue2rgb=(p,q,t)=>{
        if(t<0)t+=1;
        if(t>1)t-=1;
        if(t<1/6) return p+(q-p)*6*t;
        if(t<1/2) return q;
        if(t<2/3) return p+(q-p)*(2/3 - t)*6;
        return p;
      }
      const q = l<0.5 ? l*(1+s) : l+s-l*s;
      const p = 2*l - q;
      r=hue2rgb(p,q,h+1/3);
      g=hue2rgb(p,q,h);
      b=hue2rgb(p,q,h-1/3);
    }
    return [Math.round(r*255), Math.round(g*255), Math.round(b*255)];
  }

  // --- Resize ---
  window.addEventListener("resize",()=>{
    width = window.innerWidth;
    height = window.innerHeight;
    canvas.width = width;
    canvas.height = height;
    maskCanvas.width = width;
    maskCanvas.height = height;
    ctx.font = `${fontSize}px Arial`;
    maskData = createMask();
  });

})();
</script>